Dart编程语言(下半部)
	泛型
		为什么使用泛型(通常情况下，使用一个字母来代表类型参数， 例如 E, T, S, K, 和 V 等)
		```
		1.正确指定泛型类型可以提高代码质量。
		2.使用泛型可以减少重复的代码。
		```
		使用集合字面量
		```
		var names = List<String>();
		
		```
		使用泛型类型的构造函数
		```
		类名字后面使用尖括号（<...>）来指定泛型类型。
		var nameSet = Set<String>.from(names);
		
		下面代码创建了一个 key 为 integer， value 为 View 的 map 对象：
		var views = Map<int, View>();
		
		```
		运行时中的泛型集合
		```
		Dart 中泛型类型是 固化的，也就是说它们在运行时是携带着类型信息的。 
		var names = List<String>();
		names.addAll(['Seth', 'Kathy', 'Lars']);
		print(names is List<String>); // true
		
		```
		限制泛型类型
		```
		使用泛型类型的时候，可以使用 extends 实现参数类型的限制。
		class Foo<T extends SomeBaseClass> {
		  String toString() => "Instance of 'Foo<$T>'";
		}
		
		```
		使用泛型函数
		```
		允许在方法和函数上使用类型参数：
		T first<T>(List<T> ts) {
		  T tmp = ts[0];
		  return tmp;
		}
		这里的 first (<T>) 泛型可以在如下地方使用参数 T ：
		函数的返回值类型 (T).
		参数的类型 (List<T>).
		局部变量的类型 (T tmp).
		
		
		```
	库和可见性
		使用库
		```
		1.通过 import 指定一个库命名空间中的内如如何在另一个库中使用。import 'dart:html';
		
		2.指定库前缀
		如果导入两个存在冲突标识符的库， 则可以为这两个库，或者其中一个指定前缀。 
		import 'package:lib2/lib2.dart' as lib2;
		
		3.导入库的一部分
		// Import only foo.
		import 'package:lib1/lib1.dart' show foo;
		// Import all names EXCEPT foo.
		import 'package:lib2/lib2.dart' hide foo;
		
		4. 延迟加载库
		Deferred loading (也称之为 lazy loading) 可以让应用在需要的时候再加载库。
		import 'package:greetings/hello.dart' deferred as hello;
		当需要使用的时候，使用库标识符调用 loadLibrary() 函数来加载库：
		
		Future greet() async {
		  await hello.loadLibrary();
		  hello.printGreeting();
		}
		
		```
		实现库请参考 [Create Library Packages](https://www.dartcn.com/guides/libraries/create-library-packages)]这里面包括：
		```
		如何组织库的源文件。
		如何使用 export 命令。
		何时使用 part 命令。
		何时使用 library 命令。
		```
	异步支持
		处理 Future
		```
		1.可以通过下面两种方式，获得 Future 执行完成的结果：
		使用 async 和 await.
		使用 Future API.
		
		2.使用 async 和 await 关键字的代码是异步的。 使用 await， 代码必须在异步函数（使用 async 标记的函数）中：
		Future checkVersion() async {
		  var version = await lookUpVersion();
		}
		
		3.使用 try， catch， 和 finally 来处理代码中使用 await 导致的错误。
		
		4.在 await 表达式 中， 表达式的值通常是一个 Future 对象； 如果不是，这是表达式的值会被自动包装成一个 Future 对象。 Future 对象指明返回一个对象的承诺（promise）。 await 表达式执行的结果为这个返回的对象。 await 表达式会阻塞代码的执行，直到需要的对象返回为止。
		```
		声明异步函数
		```
		函数体被 async 标示符标记的函数，即是一个_异步函数_。 将 async 关键字添加到函数使其返回Future。 
		String lookUpVersion() => '1.0.0';
		改造为：
		Future<String> lookUpVersion() async => '1.0.0';
		
		如果函数没有返回有效值， 需要设置其返回类型为 Future<void> 。
		
		```
		处理 Stream
		```
		1.当需要从 Stream 中获取数据值时， 可以通过一下两种方式：
		使用 async 和 一个 异步循环 （await for）。
		使用 Stream API,
		
		2.异步for循环的使用形式：
		await for (varOrType identifier in expression) {
		  // Executes each time the stream emits a value.
		}
		上面表达式返回的值必须是 Stream 类型。 执行流程如下：
		1).等待，直到流发出一个值。
		2).执行 for 循环体，将变量设置为该发出的值。
		3).重复1和2，直到关闭流。
		
		3.使用 break 或者 return 语句可以停止接收 stream 的数据， 这样就跳出了 for 循环， 并且从 stream 上取消注册。
		```
	其他
		生成器
		```
		当您需要延迟生成( lazily produce )一系列值时， 可以考虑使用_生成器函数_。 Dart 内置支持两种生成器函数：
		Synchronous 生成器： 返回一个 Iterable 对象。
		Asynchronous 生成器： 返回一个 Stream 对象。
		
		通过在函数体标记 sync*， 可以实现一个同步生成器函数。 使用 yield 语句来传递值：
		Iterable<int> naturalsTo(int n) sync* {
		  int k = 0;
		  while (k < n) yield k++;
		}
		
		通过在函数体标记 async*， 可以实现一个异步生成器函数。 使用 yield 语句来传递值：
		Stream<int> asynchronousNaturalsTo(int n) async* {
		  int k = 0;
		  while (k < n) yield k++;
		}
		
		
		如果生成器是递归的，可以使用 yield* 来提高其性能：
		Iterable<int> naturalsDownFrom(int n) sync* {
		  if (n > 0) {
		    yield n;
		    yield* naturalsDownFrom(n - 1);
		  }
		}
		```
		可调用类
		```
		通过实现类的 call() 方法， 能够让类像函数一样被调用。
		```
		Isolates
		```
		所有 Dart 代码都在隔离区（ isolates ）内运行，而不是线程。 每个隔离区都有自己的内存堆，确保每个隔离区的状态都不会被其他隔离区访问。
		```
		Typedefs
		```
		在 Dart 中，函数也是对象，就想字符和数字对象一样。 使用 typedef ，或者 function-type alias 为函数起一个别名， 别名可以用来声明字段及返回值类型。 当函数类型分配给变量时，typedef会保留类型信息。
		
		typedef Compare = int Function(Object a, Object b);
		
		```
		元数据
		```
		使用元数据可以提供有关代码的其他信息。 元数据注释以字符 @ 开头， 后跟对编译时常量 (如 deprecated) 的引用或对常量构造函数的调用。
		
		对于所有 Dart 代码有两种可用注解：@deprecated 和 @override。 关于 @override 的使用， 参考 扩展类（继承）。 下面是使用 @deprecated 注解的示例：
		  /// _Deprecated: Use [turnOn] instead._
		  @deprecated
		  void activate() {...}
		```
		注释
		```
		1.单行: 注释以 // 开始。 所有在 // 和改行结尾之间的内容被编译器忽略。
		
		2.多行注释以 /* 开始， 以 */ 结尾。 所有在 /* 和 */ 之间的内容被编译器忽略 （不会忽略文档注释）。 多行注释可以嵌套。
		
		3.文档注释可以是多行注释，也可以是单行注释， 文档注释以 /// 或者 /** 开始。 在连续行上使用 /// 与多行文档注释具有相同的效果。
		
		  /// 喂养骆驼 [Food].
		在生成的文档中，[Food] 会成为一个链接， 指向 Food 类的 API 文档。
		```